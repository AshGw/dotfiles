#!/bin/bash

REPO=https://raw.githubusercontent.com/AshGw/dotfiles/main
GREEN="\e[1;32m"
RED="\e[31m"
CYAN="\e[36m"
ENDCOLOR="\e[0m"

# zsh needs to be installed natively, or else it brings trouble in some environments as 
# $HOM/.nix-profile/bin/zsh is not recognized as a valid shell
if ! command -v zsh &> /dev/null; then
  if [ -f "/etc/debian_version" ]; then
    echo "Zsh not found. Installing zsh on Debian..."
    sudo apt update
    sudo apt -y install zsh
  else
    echo -e "${RED}Zsh not found, and you are not on Debian. Install it with your package manager to continue. Exiting. ${ENDCOLOR}"
    exit 1
  fi
fi

# nix setup
if ! command -v xz &> /dev/null; then
  if [ -f "/etc/debian_version" ]; then
    echo "xz not found. Installing xz-utils on Debian..."
    sudo apt update
    sudo apt -y install xz-utils
    echo "Also installing build essentials..:"
    sudo apt  -y install build-essential
  else
    echo -e "${RED}xz not found, and you are not on Debian, install it with your package manager to continue. Exiting. ${ENDCOLOR}"
    exit 1
  fi
fi
echo -e "${GREEN}Installing nix.. ${ENDCOLOR}"

sh <(curl -L https://nixos.org/nix/install) --no-daemon
. ~/.nix-profile/etc/profile.d/nix.sh

echo -e "${GREEN}Installing all the necessary packages.. ${ENDCOLOR}"

# chad packages installation
nix-env -iA nixpkgs.git \
    nixpkgs.curl \
    nixpkgs.wget \
    nixpkgs.neovim \
    nixpkgs.tmux \
    nixpkgs.bat \
    nixpkgs.python3 \
    nixpkgs.openssh \
    nixpkgs.neofetch \
    nixpkgs.tree \
    nixpkgs.htop \
    nixpkgs.fd \
    nixpkgs.xclip \
    nixpkgs.polybar \
    nixpkgs.feh \
    nixpkgs.man \
    nixpkgs.bruno \
    nixpkgs.i3 \
    nixpkgs.picom \
    nixpkgs.pango \
    nixpkgs.ripgrep \
    nixpkgs.direnv \
    nixpkgs.librewolf \
    nixpkgs.chromium \
    nixpkgs.virtualbox \
    nixpkgs.wireshark \
    nixpkgs.nmap \
    nixpkgs.pandoc \
    nixpkgs.zathura \
    nixpkgs.tor \
    nixpkgs.tor-browser

echo -e "${CYAN}The whole 9 setup.. ${ENDCOLOR}"

mkdir work trash personal 

# tmux plugin manager
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm


# dircolors
curl https://raw.githubusercontent.com/seebi/dircolors-solarized/master/dircolors.ansi-dark --output ~/.dircolors


# zsh setup

sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" <<< $'\n'
rm -rf ~/.zshrc

mkdir ~/.config ~/.ssh ~/.config/nvim ~/.config/zathura ~/.config/neofetch ~/.config/picom ~/.config/polybar ~/.config/i3 

# dotfiles mapping
echo -e "${CYAN}Copying the files into $HOME..${ENDCOLOR}"

declare -A dotfiles=(
  [".zshrc"]="$REPO/.zshrc"
  [".dircolors"]="$REPO/.dircolors"
  [".bashrc"]="$REPO/.bashrc"
  [".nanorc"]="$REPO/.nanorc"
  [".tmux.conf"]="$REPO/.tmux.conf"
  [".gitconfig"]="$REPO/.gitconfig"
  [".hushlogin"]="$REPO/.hushlogin"
  [".config/nvim/init.vim"]="$REPO/.config/nvim/init.vim"
  [".config/zathura/zathurarc"]="$REPO/.config/zathura/zathurarc"
  [".config/i3/config"]="$REPO/.config/i3/config"
  [".config/polybar/colors.ini"]="$REPO/.config/polybar/colors.ini"
  [".config/polybar/config.ini"]="$REPO/.config/polybar/config.ini"
  [".config/polybar/launch.sh"]="$REPO/.config/polybar/launch.sh"
  [".config/polybar/uptime.sh"]="$REPO/.config/polybar/uptime.sh"
  [".config/neofetch/config.conf"]="$REPO/.config/neofetch/config.conf"
  [".config/picom/picom.conf"]="$REPO/.config/picom/picom.conf"
  [".ssh/_gh_gen.sh"]="$REPO/.ssh/_gh_gen.sh"
  [".ssh/config"]="$REPO/.ssh/config"

)

for file in "${!dotfiles[@]}"; do
  curl -o "$HOME/$file" "${dotfiles[$file]}"
done

#### zsh final confs
echo '#Nix' >> ~/.zshrc
 cat << 'EOF' >> ~/.zshrc
if [ -e "$HOME/.nix-profile/etc/profile.d/nix.sh" ]; then
    . "$HOME/.nix-profile/etc/profile.d/nix.sh"
fi
EOF

      ### zsh plugins ###
git clone https://github.com/zsh-users/zsh-autosuggestions.git $HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting

##############################################
#### now for the extra shit 

read -p "Do you want to install all the arbitrary dev packages? (y/n): " ans

if [ "$ans" == "y" ]; then
    
    echo -e "\e[1;32mInstalling conda...\e[0m"
    bash <(curl -L $REPO/install/arbitrary/conda)
    echo -e "${GREEN}Conda installation: Done!.${ENDCOLOR}"

    echo -e "\e[1;32mInstalling node...\e[0m"
    bash <(curl -L $REPO/install/arbitrary/node)
    echo -e "${GREEN}Node installation done!.${ENDCOLOR}"

    echo -e "\e[1;32mInstalling pnpm...\e[0m"
    bash <(curl -L $REPO/install/arbitrary/pnpm)
    echo -e "${GREEN}Pnpm installation done!.${ENDCOLOR}"

    echo -e "\e[1;32mInstalling poetry...\e[0m"
    bash <(curl -L $REPO/install/arbitrary/poetry)
    echo -e "${GREEN}Poetry installation done!${ENDCOLOR}"

    echo -e "\e[1;32mInstalling go...\e[0m"
    bash <(curl -L $REPO/install/arbitrary/go)
    echo -e "${GREEN}Go installation done!${ENDCOLOR}"

    echo -e "\e[1;32mInstalling rust...\e[0m"
    bash <(curl -L $REPO/install/arbitrary/rust)
    echo -e "${GREEN}Rust installation done!${ENDCOLOR}"
    echo -e "${CYAN}Installation of arbitrary packages is completed.${ENDCOLOR}"
else
    echo "Skipping installation of arbitrary dev packages."
fi

#############

read -p $"Do you by any chance want to install some proprietary software? (y/n)\nThe list currently contains: Obsidian: " ans

if [ "$ans" == "y" ]; then
    echo -e "${GREEN}Installing Obsidian${ENDCOLOR}"
    bash <(curl -L $REPO/install/proprietary/obsidian)
    echo -e "${GREEN}Obsidian is installed!${ENDCOLOR}"
else
    echo "Skipping the proprietary software installation."
fi

read -p $"Want to to set up GitHub SSH keys now? (y/n): " ans

if [ "$ans" == "y" ]; then
    bash <(curl -L $REPO/.ssh/_gh_gen.sh)
    echo -e "${GREEN}Done! The public key has been copied to your clipboard${ENDCOLOR}"
  
else
    echo "Aight, maybe later. You can run `ghkey` whenever youre ready to set it up."
fi


echo -e "${GREEN}Bootstrapped!${ENDCOLOR}"
echo -e "${CYAN}You might restart your shell for changes to take place${ENDCOLOR}"








